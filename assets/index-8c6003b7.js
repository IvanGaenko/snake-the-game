var l=Object.defineProperty;var u=(i,e,t)=>e in i?l(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var s=(i,e,t)=>(u(i,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))n(o);new MutationObserver(o=>{for(const a of o)if(a.type==="childList")for(const r of a.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function t(o){const a={};return o.integrity&&(a.integrity=o.integrity),o.referrerPolicy&&(a.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?a.credentials="include":o.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function n(o){if(o.ep)return;o.ep=!0;const a=t(o);fetch(o.href,a)}})();const d=(i,e)=>{switch(e){case"ArrowUp":{i={...i,y:i.y-1};break}case"ArrowDown":{i={...i,y:i.y+1};break}case"ArrowLeft":{i={...i,x:i.x-1};break}case"ArrowRight":{i={...i,x:i.x+1};break}}return i},p=i=>{let e;return t=>{e&&clearTimeout(e),e=setTimeout(i,500,t)}},g=i=>{const e=i.end.x-i.start.x,t=i.end.y-i.start.y;return Math.abs(e)>Math.abs(t)?e<0?"ArrowLeft":"ArrowRight":t<0?"ArrowUp":"ArrowDown"};class y{render(){const e=document.createElement("header");return e.className="header",e.innerHTML=`
    <div class="header-container">
      <button class="start">
        <img src="/play.png" class="play-button" alt="play-button" />
        <img src="/pause.png" class="pause-button" alt="pause-buttom" />
        <img src="/reset.png" class="reset-button" alt="reset-buttom" />
      </button>
      <div class="score">0000</div>
      <button class="options">
        <img
          src="/options.png"
          class="options-button"
          alt="options-button"
        />
      </button>
    </div>
  `,e}}class m{render(){const e=document.createElement("main");return e.className="canvas-container",e.innerHTML=`
      <canvas id="background"></canvas>
      <canvas id="snake"></canvas>
      <canvas id="apple"></canvas>
  `,e}}const c=20;class h{constructor(){s(this,"container");s(this,"canvas");s(this,"context");s(this,"columnCount");s(this,"rowCount");s(this,"partWidth");s(this,"partHeight");this.container=document.querySelector(".canvas-container"),this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.columnCount=0,this.rowCount=0,this.partWidth=0,this.partHeight=0,this.calculateDimensions(),window.addEventListener("resize",()=>{this.calculateDimensions()})}calculateDimensions(){this.columnCount=Math.round(this.container.clientWidth/c),this.rowCount=Math.round(this.container.clientHeight/c),this.partWidth=this.container.clientWidth/this.columnCount,this.partHeight=this.container.clientHeight/this.rowCount}}class v extends h{constructor(){super(),this.canvas=document.querySelector("#background"),this.canvas.width=this.container.clientWidth,this.canvas.height=this.container.clientHeight,this.context=this.canvas.getContext("2d")}resize(e){this.canvas.width=this.container.clientWidth,this.canvas.height=this.container.clientHeight,e&&this.render()}clear(){this.context!==null&&this.canvas!==null&&this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}render(){if(this.context!==null&&this.canvas!==null){const e=Math.round(Math.min(this.canvas.height,this.canvas.width)/6);this.context.fillStyle="rgba(150, 120, 150, .5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.fillStyle="white",this.context.font=`${e}px Inter`;const t="Game Over!",n=this.context.measureText(t);this.context.fillText(t,this.canvas.width/2-n.width/2,this.canvas.height/2)}}}class f extends h{constructor(t,n="rgba(0, 0, 255, 0.8)"){super();s(this,"body");s(this,"color");this.canvas=document.querySelector("#snake"),this.canvas.width=this.container.clientWidth,this.canvas.height=this.container.clientHeight,this.context=this.canvas.getContext("2d"),this.body=t===void 0?this.getDefaultSnake():t,this.color=n}getDefaultSnake(){const t=[{x:0,y:0},{x:0,y:0},{x:0,y:0}];for(let n=0;n<t.length;n++)t[n].x=Math.floor(this.columnCount/2)+n-1,t[n].y=Math.round(this.rowCount/2);return t}init(){this.body=this.getDefaultSnake(),this.render()}move(t,n=!1){const o=d(this.body[this.body.length-1],t);n||this.body.shift(),this.body.push(o)}resize(t){this.canvas.width=this.container.clientWidth,this.canvas.height=this.container.clientHeight,t?this.render():this.init()}clear(){this.context!==null&&this.canvas!==null&&this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}render(){if(this.context!==null&&this.canvas!==null){this.clear();const t=Math.floor(this.partWidth<this.partHeight?this.partWidth/5:this.partHeight/5);for(let n=0;n<this.body.length;n++)this.context.beginPath(),this.context.fillStyle=n===this.body.length-1?"rgba(0, 255, 0, 0.8)":this.color,this.context.strokeStyle="rgba(255, 255, 255, 0.4)",this.context.roundRect(this.body[n].x*this.partWidth,this.body[n].y*this.partHeight,this.partWidth-1,this.partHeight-1,[t]),this.context.fill(),this.context.stroke()}}}class b extends h{constructor(t){super();s(this,"position");s(this,"snakeBody");this.canvas=document.querySelector("#apple"),this.canvas.width=this.container.clientWidth,this.canvas.height=this.container.clientHeight,this.context=this.canvas.getContext("2d"),this.position={x:0,y:0},this.snakeBody=t,this._generatePosition(this.snakeBody)}init(t){this._generatePosition(t),this.render()}_generatePosition(t){if(t.length!==0){this.position={x:Math.floor(Math.random()*this.columnCount),y:Math.floor(Math.random()*this.rowCount)};for(let n=0;n<t.length;n++)this.position.x===t[n].x&&this.position.y===t[n].y&&this._generatePosition(t)}}resize(t){this.canvas.width=this.container.clientWidth,this.canvas.height=this.container.clientHeight,this.init(t)}clear(){this.context!==null&&this.canvas!==null&&this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}render(){if(this.context!==null&&this.canvas!==null){this.clear(),this.context.beginPath(),this.context.fillStyle="rgba(255, 0, 0, 0.7)";const t=Math.floor(this.partWidth<this.partHeight?this.partWidth/2:this.partHeight/2);this.context.roundRect(this.position.x*this.partWidth,this.position.y*this.partHeight,this.partWidth-1,this.partHeight-1,[t]),this.context.fill()}}}class x{render(){const e=document.createElement("div");return e.className="options-container",e.innerHTML=`
      <div class="options-content">
      <header class="options-header">
        <div class="options-logo">Snake</div>
        <button class="options-close">
          <img src="/close.png" class="close-button" alt="close-button" />
        </button>
      </header>
      <div class="options-main">
        <span class="speed-value">Speed</span>
        <div class="decrease-increase-container">
          <button class="decrease-button">-</button>
          <span class="options-speed"></span>
          <button class="increase-button">+</button>
        </div>
      </div>
    </div>
    `,e}}class w{constructor(){s(this,"container");s(this,"content");s(this,"background");s(this,"snake");s(this,"apple");s(this,"canvasContainer");s(this,"startButton");s(this,"optionsButton");s(this,"optionsButtonClose");s(this,"decreaseButton");s(this,"increaseButton");s(this,"playImage");s(this,"pauseImage");s(this,"resetImage");s(this,"scoreContent");s(this,"optionsContainer");s(this,"optionsSpeed");this.container=document.querySelector(".container"),this.content=document.querySelector(".content"),this.setupUI(),this.canvasContainer=document.querySelector(".canvas-container"),this.startButton=document.querySelector(".start"),this.optionsButton=document.querySelector(".options"),this.optionsButtonClose=document.querySelector(".options-close"),this.decreaseButton=document.querySelector(".decrease-button"),this.increaseButton=document.querySelector(".increase-button"),this.playImage=document.querySelector(".play-button"),this.pauseImage=document.querySelector(".pause-button"),this.resetImage=document.querySelector(".reset-button"),this.scoreContent=document.querySelector(".score"),this.optionsContainer=document.querySelector(".options-container"),this.optionsSpeed=document.querySelector(".options-speed"),this.background=new v,this.snake=new f,this.apple=new b(this.snake.body),this.initCanvasElements()}setupUI(){const e=[y,m];for(let t=0;t<e.length;t++){const n=e[t],o=new n().render();this.content.appendChild(o)}this.container.appendChild(new x().render())}initCanvasElements(){this.snake.render(),this.apple.render()}setPlayButton(e){switch(this.playImage.style.display="none",this.pauseImage.style.display="none",this.resetImage.style.display="none",e){case"play":this.playImage.style.display="block";break;case"pause":this.pauseImage.style.display="block";break;case"reset":this.resetImage.style.display="block";break}}toggleOptions(e){this.optionsContainer.style.display=e?"flex":"none"}}class S extends w{constructor(){super();s(this,"isPlaying");s(this,"isAbleChangeDirection");s(this,"gameIsOver");s(this,"isAppleEaten");s(this,"timeout");s(this,"currentDirection");s(this,"score");s(this,"speed");s(this,"isPaused");s(this,"touch");this.isPlaying=!1,this.isAbleChangeDirection=!0,this.gameIsOver=!1,this.isAppleEaten=!1,this.timeout,this.currentDirection="ArrowRight",this.score=0,this.speed=5,this.isPaused=!1,this.touch={isAble:!0,start:{x:0,y:0},end:{x:0,y:0},timeout:0},this.setupEventListeners()}setupEventListeners(){this.startButton.addEventListener("click",t=>{t.preventDefault(),this.toggleGame()}),window.addEventListener("keydown",t=>{t.preventDefault(),this.isPlaying?(this.changeDirection(t.key),t.key===" "&&this.toggleGame()):(this.changeDirection(t.key),this.toggleGame())}),window.addEventListener("resize",t=>{t.preventDefault(),this.background.resize(this.gameIsOver),this.snake.resize(this.isPlaying),this.apple.clear()}),window.addEventListener("resize",p(t=>{t.preventDefault(),this.apple.resize(this.snake.body)})),this.canvasContainer.addEventListener("touchstart",t=>{t.preventDefault(),this.touchHandler(t.type,t.changedTouches[0].screenX,t.changedTouches[0].screenY)}),this.canvasContainer.addEventListener("touchmove",t=>{t.preventDefault(),this.touchHandler(t.type,t.changedTouches[0].screenX,t.changedTouches[0].screenY)}),this.canvasContainer.addEventListener("touchend",t=>{t.preventDefault(),this.touchHandler(t.type,t.changedTouches[0].screenX,t.changedTouches[0].screenY)}),this.optionsButton.addEventListener("click",t=>{t.preventDefault(),this.openSettings()}),this.optionsButtonClose.addEventListener("click",t=>{t.preventDefault(),this.closeSettings()}),this.decreaseButton.addEventListener("click",t=>{t.preventDefault(),this.decreaseSpeed()}),this.increaseButton.addEventListener("click",t=>{t.preventDefault(),this.increaseSpeed()})}touchHandler(t,n,o){const a=()=>{const r=g(this.touch);this.isPlaying?this.changeDirection(r):(this.changeDirection(r),this.toggleGame())};t==="touchstart"&&(this.touch.start.x=n,this.touch.start.y=o,this.touch.timeout=setTimeout(()=>{this.touch.isAble=!1,this.touch.start.x!==this.touch.end.x&&this.touch.start.y!==this.touch.end.y&&a()},150)),t==="touchmove"&&this.touch.isAble&&(this.touch.end.x=n,this.touch.end.y=o),t==="touchend"&&(this.touch.isAble&&this.touch.start.x!==this.touch.end.x&&this.touch.start.y!==this.touch.end.y&&this.touch.end.x!==0&&this.touch.end.y!==0&&a(),clearTimeout(this.touch.timeout),this.touch.isAble=!0)}startGame(){this.isPlaying=!0,this.setPlayButton("pause"),this.moveSnake()}pauseGame(){this.isPlaying=!1,this.setPlayButton("play"),clearTimeout(this.timeout)}toggleGame(){this.gameIsOver?this.resetTheGame():this.isPlaying?this.pauseGame():this.startGame()}moveSnake(){this.snake.move(this.currentDirection,this.isAppleEaten),this.checkIntersection(),this.isPlaying&&(this.snake.render(),this.isAppleEaten&&(this.isAppleEaten=!1),this.checkAppleDevour(),this.isAbleChangeDirection=!0,this.timeout=setTimeout(()=>{this.moveSnake()},1e3/this.speed))}changeDirection(t){this.isAbleChangeDirection&&(t==="ArrowLeft"&&this.currentDirection!=="ArrowRight"||t==="ArrowRight"&&this.currentDirection!=="ArrowLeft"||t==="ArrowDown"&&this.currentDirection!=="ArrowUp"||t==="ArrowUp"&&this.currentDirection!=="ArrowDown")&&(this.currentDirection=t,this.isAbleChangeDirection=!1)}checkIntersection(){const t=this.snake.body[this.snake.body.length-1];(t.x===this.background.columnCount||t.x<0||t.y===this.background.rowCount||t.y<0)&&this.setGameIsOver();const n=this.snake.body.slice(0,-1);for(let o=0;o<n.length;o++)n[o].x===t.x&&n[o].y===t.y&&this.setGameIsOver()}checkAppleDevour(){const t=this.snake.body[this.snake.body.length-1];t.x===this.apple.position.x&&t.y===this.apple.position.y&&(this.isAppleEaten=!0,this.score=this.score+this.speed,this.scoreContent.textContent=this.score.toString().padStart(4,"0"),this.apple.init(this.snake.body))}setGameIsOver(){this.isPlaying=!1,this.gameIsOver=!0,clearTimeout(this.timeout),this.setPlayButton("reset"),this.background.render()}resetTheGame(){this.snake.init(),this.setPlayButton("play"),this.gameIsOver=!1,this.currentDirection="ArrowRight",this.background.clear(),this.score=0,this.scoreContent.textContent=this.score.toString().padStart(4,"0")}openSettings(){this.isPlaying&&(this.pauseGame(),this.isPaused=!0),this.optionsSpeed.textContent=this.speed.toString(),this.toggleOptions(!0)}increaseSpeed(){this.speed<20&&(this.speed++,this.optionsSpeed.textContent=this.speed.toString())}decreaseSpeed(){this.speed>1&&(this.speed--,this.optionsSpeed.textContent=this.speed.toString())}closeSettings(){this.isPaused&&(this.isPaused=!1,this.startGame()),this.toggleOptions(!1)}}new S;
